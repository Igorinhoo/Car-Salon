// <auto-generated />
using System;
using CarSalon.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSalon.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221130140112_basic seed")]
    partial class basicseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarSalon.Web.Data.BrandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8419),
                            ImgUrl = "https://brandslogos.com/wp-content/uploads/images/large/audi-logo.png",
                            Name = "Audi",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8421)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8441),
                            ImgUrl = "img/Brands/Bmw .png",
                            Name = "BMW",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8441)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8448),
                            ImgUrl = "img/Brands/Fiat .png",
                            Name = "Fiat",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8449)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8455),
                            ImgUrl = "img/Brands/Porsche .png",
                            Name = "Porsche",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8456)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8462),
                            ImgUrl = "img/Brands/Jeep .png",
                            Name = "Jeep",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8462)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8471),
                            ImgUrl = "img/Brands/Mercedes .png",
                            Name = "Mercedes",
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8471)
                        });
                });

            modelBuilder.Entity("CarSalon.Web.Data.EquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Four Drive Wheel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Turbo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Manual Transmission"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Automatic Transmission"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cabriolet"
                        },
                        new
                        {
                            Id = 6,
                            Name = "System ABS"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Two doors"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Five doors"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Three doors"
                        });
                });

            modelBuilder.Entity("CarSalon.Web.Data.Model_EquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ModelId");

                    b.ToTable("Model_Equipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentId = 9,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            EquipmentId = 6,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 3,
                            EquipmentId = 4,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 4,
                            EquipmentId = 7,
                            ModelId = 2
                        },
                        new
                        {
                            Id = 5,
                            EquipmentId = 3,
                            ModelId = 2
                        },
                        new
                        {
                            Id = 6,
                            EquipmentId = 8,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 7,
                            EquipmentId = 4,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 8,
                            EquipmentId = 1,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 9,
                            EquipmentId = 6,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 10,
                            EquipmentId = 8,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 11,
                            EquipmentId = 6,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 12,
                            EquipmentId = 4,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 13,
                            EquipmentId = 6,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 14,
                            EquipmentId = 7,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 15,
                            EquipmentId = 4,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 16,
                            EquipmentId = 3,
                            ModelId = 7
                        },
                        new
                        {
                            Id = 17,
                            EquipmentId = 1,
                            ModelId = 7
                        },
                        new
                        {
                            Id = 18,
                            EquipmentId = 1,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 19,
                            EquipmentId = 4,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 20,
                            EquipmentId = 6,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 21,
                            EquipmentId = 8,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 22,
                            EquipmentId = 2,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 23,
                            EquipmentId = 6,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 24,
                            EquipmentId = 9,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 25,
                            EquipmentId = 3,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 26,
                            EquipmentId = 3,
                            ModelId = 10
                        },
                        new
                        {
                            Id = 27,
                            EquipmentId = 8,
                            ModelId = 10
                        });
                });

            modelBuilder.Entity("CarSalon.Web.Data.ModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("CarType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fuel")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MadeIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ViewNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BrandForeignKey");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandForeignKey = 2,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8486),
                            Fuel = 2,
                            ImgUrl = "img/Models/M850i Coupé.png",
                            IsNew = true,
                            MadeIn = new DateTime(2020, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8492),
                            Name = "M850i xDrive Coupé",
                            Price = 700000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8487),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 2,
                            BrandForeignKey = 6,
                            CarType = 2,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8537),
                            Fuel = 1,
                            ImgUrl = "img/Models/citaro.png",
                            IsNew = true,
                            MadeIn = new DateTime(2018, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8538),
                            Name = "Citaro",
                            Price = 400000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8537),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 3,
                            BrandForeignKey = 4,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8548),
                            Fuel = 2,
                            ImgUrl = "img/Models/Cayenne SUV.png",
                            IsNew = false,
                            MadeIn = new DateTime(2020, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8549),
                            Name = "Cayenne SUV",
                            Price = 440000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8548),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 4,
                            BrandForeignKey = 1,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8561),
                            Fuel = 4,
                            ImgUrl = "img/Models/Q5 TFSI.png",
                            IsNew = true,
                            MadeIn = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8561),
                            Name = "Q5 II TFSI e",
                            Price = 600000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8561),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 5,
                            BrandForeignKey = 6,
                            CarType = 1,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8568),
                            Fuel = 1,
                            ImgUrl = "img/Models/actros.png",
                            IsNew = false,
                            MadeIn = new DateTime(2017, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8569),
                            Name = "Actros",
                            Price = 400000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8568),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 6,
                            BrandForeignKey = 3,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8578),
                            Fuel = 4,
                            ImgUrl = "img/Models/500.png",
                            IsNew = false,
                            MadeIn = new DateTime(2017, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8579),
                            Name = "500",
                            Price = 120000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8578),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 7,
                            BrandForeignKey = 5,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8587),
                            Fuel = 4,
                            ImgUrl = "https://www.jeep.pl/content/dam/jeep/crossmarket/model/wrangler-4xe-my22/overview/colorizer/sahara/jeep-wrangler-4xe-sahara-black-565x330.png",
                            IsNew = true,
                            MadeIn = new DateTime(2018, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8587),
                            Name = "Wrangler",
                            Price = 361000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8587),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 8,
                            BrandForeignKey = 5,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8595),
                            Fuel = 4,
                            ImgUrl = "https://www.jeep.pl/content/dam/jeep/crossmarket/compass-my-23/compass-ehybrid/overview/trim/trim-s/Jeep_Compass_eHybrid_S_SolidBlack.png",
                            IsNew = true,
                            MadeIn = new DateTime(2016, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8596),
                            Name = "Compass",
                            Price = 410000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8596),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 9,
                            BrandForeignKey = 2,
                            CarType = 3,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8604),
                            Fuel = 1,
                            ImgUrl = "https://www.robomarkets.pl/uploads/news/2019/may/bmw-m-motorsport-sponsorship-05-2019/images/car-dtm-final.png",
                            IsNew = true,
                            MadeIn = new DateTime(2021, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8605),
                            Name = "M MOTORSPORT",
                            Price = 710000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8605),
                            ViewNumber = 0L
                        },
                        new
                        {
                            Id = 10,
                            BrandForeignKey = 3,
                            CarType = 0,
                            CreatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8614),
                            Fuel = 4,
                            ImgUrl = "https://www.fiat.pl/content/dam/fiat/com/my23/panda/colorizer/white/Panda-figurini-colorizer-Gelato-White-desktop-680x430.png",
                            IsNew = false,
                            MadeIn = new DateTime(2016, 11, 30, 15, 1, 12, 423, DateTimeKind.Local).AddTicks(8615),
                            Name = "Panda",
                            Price = 70000.0,
                            UpdatedAt = new DateTime(2022, 11, 30, 14, 1, 12, 423, DateTimeKind.Utc).AddTicks(8614),
                            ViewNumber = 0L
                        });
                });

            modelBuilder.Entity("CarSalon.Web.Data.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarSalon.Web.Data.Model_EquipmentEntity", b =>
                {
                    b.HasOne("CarSalon.Web.Data.EquipmentEntity", "equipment")
                        .WithMany("ModelEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSalon.Web.Data.ModelEntity", "model")
                        .WithMany("ModelEquipments")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipment");

                    b.Navigation("model");
                });

            modelBuilder.Entity("CarSalon.Web.Data.ModelEntity", b =>
                {
                    b.HasOne("CarSalon.Web.Data.BrandEntity", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarSalon.Web.Data.BrandEntity", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarSalon.Web.Data.EquipmentEntity", b =>
                {
                    b.Navigation("ModelEquipments");
                });

            modelBuilder.Entity("CarSalon.Web.Data.ModelEntity", b =>
                {
                    b.Navigation("ModelEquipments");
                });
#pragma warning restore 612, 618
        }
    }
}
